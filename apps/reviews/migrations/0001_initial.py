# Generated by Django 5.2.7 on 2025-10-12 10:06

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assigned_at', models.DateTimeField()),
                ('due_date', models.DateTimeField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('recommendation', models.CharField(choices=[('ACCEPT', 'Accept'), ('MINOR_REVISION', 'Minor Revision'), ('MAJOR_REVISION', 'Major Revision'), ('REJECT', 'Reject')], max_length=20)),
                ('confidence_level', models.IntegerField(choices=[(1, 'Very Low'), (2, 'Low'), (3, 'Medium'), (4, 'High'), (5, 'Very High')], help_text="Reviewer's confidence in their recommendation")),
                ('scores', models.JSONField(default=dict, help_text='Review scores (novelty, methodology, clarity, significance, etc.)')),
                ('review_text', models.TextField(help_text='Detailed review comments')),
                ('confidential_comments', models.TextField(blank=True, help_text='Comments visible only to editors')),
                ('auto_summary', models.TextField(blank=True, help_text='AI-generated summary of the review')),
                ('quality_score', models.FloatField(blank=True, help_text='Quality score of the review (0-10)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('is_anonymous', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('DECLINED', 'Declined'), ('ACCEPTED', 'Accepted'), ('COMPLETED', 'Completed'), ('OVERDUE', 'Overdue'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('invited_at', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField()),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('declined_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('invitation_message', models.TextField(blank=True)),
                ('decline_reason', models.TextField(blank=True)),
                ('review_round', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReviewerRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('confidence_score', models.FloatField(help_text='ML confidence score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('reasoning', models.JSONField(default=dict, help_text='Reasoning behind the recommendation (expertise match, etc.)')),
                ('model_version', models.CharField(help_text='Version of the ML model used', max_length=50)),
                ('generated_by', models.CharField(default='ml_service', help_text='Service that generated this recommendation', max_length=100)),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-confidence_score', '-created_at'],
            },
        ),
    ]
