# Generated by Django 5.2.7 on 2025-10-12 10:06

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FormatCheck',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('check_type', models.CharField(choices=[('MANUSCRIPT_FORMAT', 'Manuscript Format'), ('REFERENCE_FORMAT', 'Reference Format'), ('FIGURE_QUALITY', 'Figure Quality'), ('TABLE_FORMAT', 'Table Format'), ('METADATA_COMPLETENESS', 'Metadata Completeness'), ('FILE_COMPLIANCE', 'File Compliance')], max_length=30)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('is_compliant', models.BooleanField(blank=True, null=True)),
                ('compliance_score', models.FloatField(blank=True, help_text='Compliance score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('issues_found', models.JSONField(default=list, help_text='List of formatting issues found')),
                ('recommendations', models.JSONField(default=list, help_text='Formatting recommendations')),
                ('checker_version', models.CharField(blank=True, help_text='Version of the format checker used', max_length=50)),
                ('error_message', models.TextField(blank=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlagiarismReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(choices=[('ITHENTICATE', 'iThenticate'), ('TURNITIN', 'Turnitin'), ('CROSSREF', 'Crossref Similarity Check'), ('INTERNAL', 'Internal System'), ('OTHER', 'Other')], max_length=20)),
                ('provider_report_id', models.CharField(blank=True, help_text="External provider's report ID", max_length=100)),
                ('report_url', models.URLField(blank=True, help_text='URL to the detailed plagiarism report')),
                ('similarity_score', models.FloatField(help_text='Overall similarity percentage (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('matched_items', models.JSONField(default=list, help_text='List of matched sources and similarity details')),
                ('report_metadata', models.JSONField(default=dict, help_text='Additional report metadata and configuration')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RequirementCheck',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('requirement_type', models.CharField(choices=[('COVER_LETTER', 'Cover Letter'), ('ETHICS_STATEMENT', 'Ethics Statement'), ('FUNDING_INFORMATION', 'Funding Information'), ('CONFLICT_OF_INTEREST', 'Conflict of Interest Declaration'), ('DATA_AVAILABILITY', 'Data Availability Statement'), ('AUTHOR_CONTRIBUTIONS', 'Author Contributions'), ('SUPPLEMENTARY_MATERIALS', 'Supplementary Materials'), ('COPYRIGHT_FORM', 'Copyright Form')], max_length=30)),
                ('status', models.CharField(choices=[('REQUIRED', 'Required'), ('PROVIDED', 'Provided'), ('NOT_APPLICABLE', 'Not Applicable'), ('PENDING_REVIEW', 'Pending Review')], default='REQUIRED', max_length=20)),
                ('is_fulfilled', models.BooleanField(default=False)),
                ('fulfillment_details', models.JSONField(default=dict, help_text='Details about how the requirement was fulfilled')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['requirement_type'],
            },
        ),
    ]
