# Generated by Django 5.2.7 on 2025-10-12 10:06

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('READER', 'Reader'), ('AUTHOR', 'Author'), ('REVIEWER', 'Reviewer'), ('EDITOR', 'Editor'), ('ADMIN', 'Administrator')], max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('permissions', models.JSONField(default=dict, help_text='Role-specific permissions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Unique email address for authentication', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('username', models.CharField(blank=True, help_text='Optional username, defaults to email', max_length=150, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('orcid_id', models.CharField(blank=True, help_text='ORCID identifier (e.g., 0000-0000-0000-0000)', max_length=19, null=True, unique=True)),
                ('orcid_token_encrypted', models.BinaryField(blank=True, help_text='Encrypted ORCID access token', null=True)),
                ('affiliation_ror_id', models.CharField(blank=True, help_text='Research Organization Registry (ROR) ID', max_length=100)),
                ('affiliation_name', models.CharField(blank=True, max_length=255)),
                ('openalex_id', models.CharField(blank=True, help_text='OpenAlex author ID', max_length=100, null=True)),
                ('verification_status', models.CharField(choices=[('PENDING', 'Pending'), ('GENUINE', 'Genuine'), ('SUSPICIOUS', 'Suspicious'), ('UNCLEAR', 'Unclear')], default='PENDING', max_length=20)),
                ('verification_meta', models.JSONField(default=dict, help_text='Verification scores, evidence, and metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expertise_areas', models.ManyToManyField(blank=True, help_text='Research areas and expertise of the user', related_name='experts', to='common.concept')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                ('roles', models.ManyToManyField(blank=True, related_name='profiles', to='users.role')),
            ],
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='auth_user_email_ece7f7_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['created_at'], name='auth_user_created_2cecd0_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['orcid_id'], name='users_profi_orcid_i_290d1f_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['verification_status'], name='users_profi_verific_dc1220_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['affiliation_ror_id'], name='users_profi_affilia_9af39b_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['created_at'], name='users_profi_created_f60c54_idx'),
        ),
    ]
