# Generated by Django 5.2.7 on 2025-10-12 10:06

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('actor_type', models.CharField(choices=[('USER', 'User'), ('SYSTEM', 'System'), ('API', 'API'), ('INTEGRATION', 'Integration')], max_length=20)),
                ('action_type', models.CharField(choices=[('CREATE', 'Create'), ('READ', 'Read'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('SUBMIT', 'Submit'), ('REVIEW', 'Review'), ('APPROVE', 'Approve'), ('REJECT', 'Reject'), ('PUBLISH', 'Publish'), ('WITHDRAW', 'Withdraw')], max_length=20)),
                ('resource_type', models.CharField(choices=[('USER', 'User'), ('PROFILE', 'Profile'), ('SUBMISSION', 'Submission'), ('DOCUMENT', 'Document'), ('REVIEW', 'Review'), ('JOURNAL', 'Journal'), ('PLAGIARISM_REPORT', 'Plagiarism Report'), ('FORMAT_CHECK', 'Format Check')], max_length=30)),
                ('resource_id', models.CharField(help_text='ID of the affected resource', max_length=100)),
                ('metadata', models.JSONField(default=dict, help_text='Additional context and details about the action')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnomalyEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('UNUSUAL_SUBMISSION_PATTERN', 'Unusual Submission Pattern'), ('SUSPICIOUS_REVIEWER_BEHAVIOR', 'Suspicious Reviewer Behavior'), ('RAPID_ACCEPTANCE', 'Rapid Acceptance'), ('CITATION_MANIPULATION', 'Citation Manipulation'), ('DUPLICATE_CONTENT', 'Duplicate Content'), ('FAKE_PEER_REVIEW', 'Fake Peer Review'), ('AUTHORSHIP_ISSUES', 'Authorship Issues'), ('UNUSUAL_REFERENCE_PATTERN', 'Unusual Reference Pattern')], max_length=50)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=20)),
                ('resource_type', models.CharField(max_length=30)),
                ('resource_id', models.CharField(max_length=100)),
                ('anomaly_score', models.FloatField(help_text='Anomaly score (0-1, higher = more anomalous)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('evidence', models.JSONField(default=dict, help_text='Evidence and reasoning for the anomaly detection')),
                ('detector_name', models.CharField(max_length=100)),
                ('detector_version', models.CharField(blank=True, max_length=50)),
                ('detection_confidence', models.FloatField(help_text='Confidence in the detection (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_handled', models.BooleanField(default=False)),
                ('handled_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('is_false_positive', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-anomaly_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('badge_type', models.CharField(choices=[('QUALITY_REVIEWER', 'Quality Reviewer'), ('FAST_REVIEWER', 'Fast Reviewer'), ('PROLIFIC_AUTHOR', 'Prolific Author'), ('HELPFUL_EDITOR', 'Helpful Editor'), ('CITATION_CHAMPION', 'Citation Champion'), ('OPEN_SCIENCE_ADVOCATE', 'Open Science Advocate'), ('PEER_REVIEW_EXPERT', 'Peer Review Expert'), ('RESEARCH_INTEGRITY', 'Research Integrity')], max_length=30)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('criteria_met', models.JSONField(default=dict, help_text='Criteria that were met to earn this award')),
                ('evidence', models.JSONField(default=dict, help_text='Evidence supporting the award')),
                ('points_value', models.PositiveIntegerField(default=0)),
                ('is_public', models.BooleanField(default=True)),
                ('auto_awarded', models.BooleanField(default=True, help_text='Whether this award was automatically granted by the system')),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-awarded_at'],
            },
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('provider', models.CharField(choices=[('OPENALEX', 'OpenAlex'), ('CUSTOM', 'Custom'), ('MANUAL', 'Manual')], max_length=20)),
                ('external_id', models.CharField(blank=True, help_text="External provider's concept ID", max_length=100)),
                ('metadata', models.JSONField(default=dict, help_text='Additional concept metadata and properties')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Embedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('embedding_type', models.CharField(choices=[('DOCUMENT', 'Document'), ('PROFILE', 'Profile'), ('CONCEPT', 'Concept'), ('SUBMISSION', 'Submission'), ('REVIEW', 'Review')], max_length=20)),
                ('source_id', models.CharField(help_text='ID of the source object this embedding represents', max_length=100)),
                ('vector_dimensions', models.PositiveIntegerField()),
                ('model_name', models.CharField(help_text='Name of the model used to generate the embedding', max_length=100)),
                ('model_version', models.CharField(blank=True, max_length=50)),
                ('vector_hash', models.CharField(help_text='Hash of the vector for deduplication', max_length=64)),
                ('vector_store_id', models.CharField(blank=True, help_text='ID in external vector store (e.g., Pinecone, Weaviate)', max_length=100)),
                ('metadata', models.JSONField(default=dict, help_text='Additional embedding metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='VerificationTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('requested_role', models.CharField(choices=[('AUTHOR', 'Author'), ('REVIEWER', 'Reviewer'), ('EDITOR', 'Editor')], max_length=20)),
                ('evidence', models.JSONField(default=dict, help_text='Supporting evidence for the verification request')),
                ('ml_score', models.FloatField(blank=True, help_text='ML-generated verification score (0-1)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ml_reasoning', models.JSONField(default=dict, help_text='ML reasoning and confidence factors')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('REQUIRES_MORE_INFO', 'Requires More Information')], default='PENDING', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
