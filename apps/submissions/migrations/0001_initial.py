# Generated by Django 5.2.7 on 2025-10-12 10:06

import django.contrib.postgres.search
import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthorContribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(help_text='Author order in the publication')),
                ('contrib_role', models.CharField(choices=[('CORRESPONDING', 'Corresponding Author'), ('FIRST', 'First Author'), ('CO_AUTHOR', 'Co-author'), ('SENIOR', 'Senior Author'), ('LAST', 'Last Author')], max_length=20)),
                ('contribution_details', models.JSONField(default=dict, help_text='Detailed contribution information (conceptualization, methodology, etc.)')),
                ('has_agreed', models.BooleanField(default=False)),
                ('agreed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment_type', models.CharField(choices=[('COMMENT', 'Comment'), ('SUGGESTION', 'Suggestion'), ('CORRECTION', 'Correction'), ('QUESTION', 'Question')], max_length=20)),
                ('text', models.TextField()),
                ('location', models.JSONField(help_text='Location information (page, line, character position, etc.)')),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('document_type', models.CharField(choices=[('MANUSCRIPT', 'Manuscript'), ('SUPPLEMENTARY', 'Supplementary Material'), ('COVER_LETTER', 'Cover Letter'), ('REVIEWER_RESPONSE', 'Response to Reviewers'), ('REVISED_MANUSCRIPT', 'Revised Manuscript'), ('FINAL_VERSION', 'Final Version')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('editor_session_id', models.CharField(blank=True, help_text='Session ID for collaborative editing', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version_number', models.PositiveIntegerField()),
                ('change_summary', models.TextField(blank=True, help_text='Summary of changes in this version')),
                ('file', models.FileField(upload_to='documents/%Y/%m/%d/')),
                ('file_name', models.CharField(max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('file_hash', models.CharField(help_text='SHA-256 hash of the file for integrity', max_length=64)),
                ('diff_to_prev', models.JSONField(blank=True, help_text='Diff or patch information compared to previous version', null=True)),
                ('is_current', models.BooleanField(default=True)),
                ('immutable_flag', models.BooleanField(default=False, help_text='Mark version as immutable (cannot be changed)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-version_number'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('abstract', models.TextField(help_text='Manuscript abstract')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('REVISION_REQUIRED', 'Revision Required'), ('REVISED', 'Revised'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('WITHDRAWN', 'Withdrawn'), ('PUBLISHED', 'Published')], default='DRAFT', max_length=20)),
                ('submission_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('metadata_json', models.JSONField(default=dict, help_text='Tags, keywords, funding info, ethics declarations, etc.')),
                ('compliance_score', models.FloatField(blank=True, help_text='Overall compliance score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
