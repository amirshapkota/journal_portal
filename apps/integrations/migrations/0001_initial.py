# Generated by Django 5.2.7 on 2025-10-12 10:06

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='OJSMapping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ojs_submission_id', models.CharField(help_text='OJS submission ID', max_length=100)),
                ('ojs_instance_url', models.URLField(help_text='OJS instance URL', validators=[django.core.validators.URLValidator()])),
                ('sync_direction', models.CharField(choices=[('TO_OJS', 'To OJS'), ('FROM_OJS', 'From OJS'), ('BIDIRECTIONAL', 'Bidirectional')], default='TO_OJS', max_length=20)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('sync_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CONFLICT', 'Conflict')], default='PENDING', max_length=20)),
                ('sync_metadata', models.JSONField(default=dict, help_text='Metadata about synchronization process and conflicts')),
                ('error_log', models.TextField(blank=True)),
                ('local_version', models.CharField(blank=True, help_text='Local version identifier for conflict resolution', max_length=50)),
                ('ojs_version', models.CharField(blank=True, help_text='OJS version identifier for conflict resolution', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ORCIDIntegration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('orcid_id', models.CharField(help_text='ORCID identifier (e.g., 0000-0000-0000-0000)', max_length=19)),
                ('access_token_encrypted', models.BinaryField(help_text='Encrypted ORCID access token')),
                ('refresh_token_encrypted', models.BinaryField(blank=True, help_text='Encrypted ORCID refresh token', null=True)),
                ('token_scope', models.CharField(blank=True, help_text='ORCID token scope/permissions', max_length=255)),
                ('token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('CONNECTED', 'Connected'), ('DISCONNECTED', 'Disconnected'), ('ERROR', 'Error'), ('TOKEN_EXPIRED', 'Token Expired'), ('PENDING_VERIFICATION', 'Pending Verification')], default='PENDING_VERIFICATION', max_length=20)),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('sync_errors', models.TextField(blank=True)),
                ('orcid_data', models.JSONField(default=dict, help_text='Cached ORCID profile data')),
                ('works_data', models.JSONField(default=list, help_text='Cached ORCID works data')),
                ('auto_sync_enabled', models.BooleanField(default=True)),
                ('sync_publications', models.BooleanField(default=True)),
                ('sync_employment', models.BooleanField(default=True)),
                ('sync_education', models.BooleanField(default=True)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sync_type', models.CharField(choices=[('OJS_SUBMISSION', 'OJS Submission'), ('ORCID_PROFILE', 'ORCID Profile'), ('ORCID_WORKS', 'ORCID Works'), ('PLAGIARISM_CHECK', 'Plagiarism Check'), ('REFERENCE_CHECK', 'Reference Check'), ('METADATA_ENRICHMENT', 'Metadata Enrichment')], max_length=30)),
                ('resource_type', models.CharField(max_length=30)),
                ('resource_id', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('STARTED', 'Started'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='STARTED', max_length=20)),
                ('records_processed', models.PositiveIntegerField(default=0)),
                ('records_updated', models.PositiveIntegerField(default=0)),
                ('records_created', models.PositiveIntegerField(default=0)),
                ('records_failed', models.PositiveIntegerField(default=0)),
                ('sync_metadata', models.JSONField(default=dict, help_text='Sync execution metadata and results')),
                ('error_details', models.TextField(blank=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ExternalServiceIntegration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('service_type', models.CharField(choices=[('ITHENTICATE', 'iThenticate'), ('TURNITIN', 'Turnitin'), ('CROSSREF', 'Crossref'), ('ROR', 'Research Organization Registry'), ('OPENALEX', 'OpenAlex'), ('PUBMED', 'PubMed'), ('SCOPUS', 'Scopus'), ('WOS', 'Web of Science'), ('OTHER', 'Other')], max_length=20)),
                ('service_name', models.CharField(max_length=100)),
                ('service_url', models.URLField(validators=[django.core.validators.URLValidator()])),
                ('api_endpoint', models.URLField(blank=True)),
                ('api_key_encrypted', models.BinaryField(blank=True, help_text='Encrypted API key', null=True)),
                ('api_version', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('ERROR', 'Error'), ('RATE_LIMITED', 'Rate Limited'), ('MAINTENANCE', 'Maintenance')], default='ACTIVE', max_length=20)),
                ('last_checked_at', models.DateTimeField(blank=True, null=True)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, help_text='Last response time in milliseconds', null=True)),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('successful_requests', models.PositiveIntegerField(default=0)),
                ('failed_requests', models.PositiveIntegerField(default=0)),
                ('rate_limit_requests', models.PositiveIntegerField(blank=True, help_text='Requests allowed per rate limit period', null=True)),
                ('rate_limit_period_seconds', models.PositiveIntegerField(blank=True, help_text='Rate limit period in seconds', null=True)),
                ('configuration', models.JSONField(default=dict, help_text='Service-specific configuration')),
                ('last_error', models.TextField(blank=True)),
                ('error_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['service_type', 'status'], name='integration_service_ef668f_idx'), models.Index(fields=['status', 'last_checked_at'], name='integration_status_1ab13e_idx')],
                'unique_together': {('service_type', 'service_name')},
            },
        ),
    ]
